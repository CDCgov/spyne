/*
==========================================================================================
    Nextflow config file for running spyne_nextflow on Rosalind HPC at CDC
==========================================================================================
    This is a configuration file to run Nextflow pipeline on CDC's Sun Grid Engine, and is 
    configured to optimally schedule jobs to various queues and handles resource limits, 
    which in turn prevents many scheduling errors. This config also sets necessary parameters 
    for Conda and Singularity, and disables Docker. Note that temporary and cache directories 
    are defined below, and you should change them if necessary. This config file should be 
    passed to the Nextflow run command using -C, which will overwrite default configs.
----------------------------------------------------------------------------------------
*/

/*
==========================================================================================
    Default institutional and max resource paramters - subject to overwrite.
==========================================================================================
*/

params {
  config_profile_description = 'config file for spyne_nextflow pipeline on Rosalind HPC @ CDC'
  
  // Default resource parameters. Expecting to be overwritten.
  max_memory                 = '26.GB'
  max_cpus                   = 32
  max_time                   = '240.h'

}

/*
==========================================================================================
    Environment variables
==========================================================================================
*/

env {
  // Uncomment this line for more descriptive debugging information.
  //NXF_DEBUG = '3'
  
  // Sets options for the Java runtime instance.
  NFX_OPTS="-Xms=512m -Xmx=8g"
}

/*
==========================================================================================
    Local, Rosalind, and Singularity sge profiles
==========================================================================================
*/

profiles {
  singularity {
    // Enable Singularity features.
    singularity.enabled    = true
    singularity.autoMounts = true

    // Disable other container software.
    docker.enabled         = false
    conda.enabled          = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
    
    // Set cache directory for Singularity images.
    singularity.cacheDir = "$HOME/singularityIMG"
    
    // Prevents mounting errors in Singularity container creation caused by bad TMPDIR creation.
    process {
        scratch = false
    }
  }
  local {
    executor {
      name = 'local'
      queueSize = 16 
    }
    process {
      executor = 'local'
      memory = { 2.GB * task.cpus }
      cpus = { task.attempt * 2 }
      time = '24.h'
    }
  }
  rosalind {
    executor {
      name = 'sge'
      queueSize = 16
      pollInterval = '10sec'
      submitRateLimit = '2sec'
    }
    process {
      // Executor information
      executor = 'sge'
      jobName = { "$task.name - $task.hash" }
      penv = 'smp'
      queue = 'flu.q'

      // Disable docker by default
      docker.enabled = false

      // Resources - expected to be overwritten
      memory = { 2.GB * task.cpus }
      cpus = { task.attempt * 3 }
      time = '72.h'

      
    // Process-specific resource requirements
    // nf-core: Customise requirements for specific processes.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    // Taken from Thomas Stark's flu-ngs nextflow pipeline 
    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
    withName:CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
    }

    }
  }
}

/*
==========================================================================================
    Capture exit codes from upstream processes when piping
==========================================================================================
*/

process.shell = ['/bin/bash', '-euo', 'pipefail']


/*
==========================================================================================
    Nextflow Metrics & Reports
==========================================================================================
*/

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file = "${params.r}/timeline_${trace_timestamp}.html"
    timeline.overwirte = true
}
report {
    enabled = true
    file = "${params.r}/report_${trace_timestamp}.hmtl"
    report.overwirte = true
}
trace {
    enabled = true
    file = "${params.r}/trace_${trace_timestamp}.txt"
    trace.overwirte = true
}
dag {
    enabled = true
    file = "${params.r}/dag_${trace_timestamp}.html"
    dag.overwirte = true
}

/*
==========================================================================================
    Function to check max resources
==========================================================================================
*/

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

