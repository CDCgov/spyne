workdir: '.'

rule all:
	input:
		expand('{barcode}.fin', barcode=config['barcodes'].keys())

rule gather_fastqs:
	input:
		fastqs = lambda wildcards: config['barcodes'][wildcards.barcode]['fastqs']
	output:
		'IRMA/{barcode}.fastq'
	shell:
		'cat guppy*/*/{wildcards.barcode}/*fastq.gz > {output}'

# rule primer trimm

rule irma:
	input:
		'IRMA/{barcode}.fastq.gz'
	output:
		temp(touch('IRMA/{barcode}.irma.fin'))
	threads:
		16
	shell:
		'{workflow.basedir}/scripts/irmawrapper.sh {config[irmamodule]} {input} {wildcards.barcode}'

# Pipeline waits here for all samples to produce the checkpoint input needed here
# and then reevaluates the needed DAG for each sample.
checkpoint checkirma:
    input:
        ancient('IRMA/{barcode}.irma.fin')
    output:
        temp('IRMA/{barcode}.irma.decision')
    shell:
        '[[ -f IRMA/{wildcards.barcode}/SARS-CoV-2.bam ]] &&\
         echo passed > {output}  ||\
         echo failed > {output}'

def passedIrma(wildcards):
    with checkpoints.checkirma.get(barcode=wildcards.barcode).output[0].open() as f:
        if f.read().strip() == 'passed':
            return 'IRMA/{barcode}/SARS-CoV-2_realign_{barcode}.bam'
        else:
            return 'IRMA_negative/{barcode}'

rule pass_negatives:
    input:
        ancient('IRMA/{barcode}.irma.decision')
    output:
        'IRMA_negative/{barcode}'
    shell:
        'touch {output}'

rule realignbam:
	input:
		decision = ancient('IRMA/{barcode}.irma.decision'),
		bam = ancient('IRMA/{barcode}/SARS-CoV-2.bam'),
		ref = ancient('IRMA/{barcode}/intermediate/0-ITERATIVE-REFERENCES/R0-SARS-CoV-2.ref')
	output:
		bam = 'IRMA/{barcode}/SARS-CoV-2_realign_{barcode}.bam'
	shell:
		'minimap2 -a {input.ref} <(samtools fastq {input.bam}) | samtools view -bS |samtools sort > {output.bam} &&\
		samtools index {output.bam}'
		
rule irmaroundup:
	input:
		passedIrma 
	output:
		temp('{barcode}.fin')
	shell:
		'touch {output}'
