#!/usr/bin/env snakemake

import os
import sys

shell.executable("bash")

workdir: "."
configfile: "config.yaml"

rule all:
    input:
        expand("SC2.{barcode}.fin", barcode=config["barcodes"].keys()), 'DAIS_ribosome_output.fin'
    shell:
        'bash {workflow.basedir}/scripts/sc2_irma_qc.sh IRMA/ irma_qc_summary.csv ONT spike'

rule gather_fastqs:
    input:
        "config.yaml"
    output:
        "IRMA/cat_{barcode}.fastq.gz"
    message: "Step 1 - merging all read files into a single file"
    params:
        barcode_number = lambda wildcards: config["barcodes"][wildcards.barcode]["barcode_number"]
    shell:
        "cat fastq_pass/{params.barcode_number}/*fastq* > {output}"


rule barcode_trim_left:
    input:
        ancient("IRMA/cat_{barcode}.fastq.gz")
    output:
        "IRMA/{barcode}_bartrim_l.fastq"
    log:
        out = "logs/{barcode}.bbduk.trim_left.stdout.log",
        err = "logs/{barcode}.bbduk.trim_left.stderr.log"
    params:
        barcode_sequence = lambda wildcards: config["barcodes"][wildcards.barcode]["barcode_sequence"]
    group:
        "trim-map"
    
    threads: 16
    message: "Step 2 - trimming left barcode"
    shell:
        "bbduk.sh" 
        " in={input}"
        " out={output}"
        " hdist=3"
        " literal={params.barcode_sequence}"
        " ktrim=l"
        " k=17"
        " qin=33"
        " rcomp=f"
        " threads={threads}"
        " 1> {log.out}"
        " 2> {log.err}"



rule barcode_trim_right:
    input:
        ancient("IRMA/{barcode}_bartrim_l.fastq")
    output:
        "IRMA/{barcode}_bartrim_lr.fastq"
    log:
        out = "logs/{barcode}.bbduk.trim_right.stdout.log",
        err = "logs/{barcode}.bbduk.trim_right.stderr.log"
    params:
        barcode_sequence = lambda wildcards: config["barcodes"][wildcards.barcode]["barcode_sequence_rc"]
    group:
        "trim-map"
    threads: 16
    message: "Step 3 - trimming right barcode"
    shell:
        "bbduk.sh"
        " in={input}"
        " out={output}"
        " hdist=3"
        " literal={params.barcode_sequence}"
        " ktrim=r"
        " k=17"
        " qin=33"
        " rcomp=f"
        " threads={threads}"
        " 1> {log.out}"
        " 2> {log.err}"


rule cutadapt:
    input:
        ancient("IRMA/{barcode}_bartrim_lr.fastq")
    output:
        "IRMA/{barcode}_bartrim_lr_cutadapt.fastq"
    log:
        out = "logs/{barcode}.cutadapt.stdout.log",
        err = "logs/{barcode}.cutadapt.stderr.log"
    group:
        "trim-map"
    
    
    message: "Step 4 - clipping reads on both sides"
    shell:
        "cutadapt -u 30 -u -30 --output {output} {input} 1> {log.out} 2> {log.err}"



rule subsample:
    input:
        ancient("IRMA/{barcode}_bartrim_lr_cutadapt.fastq")
    output:
        "IRMA/{barcode}_bartrim_lr_cutadapt_subsampled.fastq"
    log:
        out = "logs/{barcode}.reformat.stdout.log",
        err = "logs/{barcode}.reformat.stderr.log"
    group:
        "trim-map"
    message: "Step 4b - subsampling cleaned up read if excess > 1M exist"
    shell:
        "reformat.sh"
        " in={input}"
        " out={output}"
        " samplereadstarget=1000000"
        " qin=33"
        " 1> {log.out}"
        " 2> {log.err}"



rule irma:
    input:
        ancient("IRMA/{barcode}_bartrim_lr_cutadapt_subsampled.fastq")
    output:
        touch("IRMA/{barcode}.irma.fin")
    log:
        out = "logs/{barcode}.irma.stdout.log",
        err = "logs/{barcode}.irma.stderr.log"
    benchmark:
        "logs/benchmarks/irma_{barcode}.log"
    group:
        "trim-map"
    threads: 14
    message: "Step 5 - assembling genome"
    shell:
        'docker run --rm -v $PWD:/data public.ecr.aws/n3z8t4o2/irma:1.0.2p3 IRMA CoV-s-gene {input} IRMA/{wildcards.barcode} |tee -a {log.out} 2> {log.err}'


# Pipeline waits here for all samples to produce the checkpoint input needed
#  here and then reevaluates the needed DAG for each sample.
checkpoint checkirma:
    input:
        ancient('IRMA/{barcode}.irma.fin')
    output:
        'IRMA/{barcode}.irma.decision'
    log:
        "logs/irma/checkirma_{barcode}.log"
    shell:
        "[[ -s IRMA/{wildcards.barcode}/SARS-CoV-2.bam ]] &&"
        " echo passed > {output} ||"
        " echo failed > {output}"



def passed_irma(wildcards):
    with checkpoints.checkirma.get(barcode=wildcards.barcode).\
    output[0].open() as f:
        if f.read().strip() == "passed":
            return 'IRMA/{barcode}'
        else:
            return "IRMA_negative/{barcode}"


rule pass_negatives:
    input:
        "IRMA/{barcode}.irma.decision"
    output:
        "IRMA_negative/{barcode}"
    shell:
        "touch {output}"


rule catfiles:
    input:
        expand('IRMA/{barcode}.irma.decision', barcode=config["barcodes"].keys())
    output:
        temp("DAIS_ribosome_input.fasta")
    message: "Step 6 - Collecting consensus genomes"
    shell:
        "for file in $(ls IRMA/*/amended_consensus/*.fa | grep -v pad); do cat $file >> {output}; done || touch {output}"

rule dais_ribosome:
    input: 
        "DAIS_ribosome_input.fasta"
    output:
        temp('DAIS_ribosome_output.fin')
    message: "Step 7 - Translating sequences into open reading frames (ORFs) with DAIS-Ribosome"
    log:
        "logs/dais_ribosome/dais.ribosome.log"
    shell:
        "{workflow.basedir}/scripts/daiswrapper.sh -i {input} -m BETACORONAVIRUS && touch {output} || touch {output}"



rule finishup:
    input:
        passed_irma
    output:
        temp("SC2.{barcode}.fin")
    shell:
        "[[ -f {input} ]] ||"
        " cat IRMA/*/amended_consensus/*.a2m >> IRMA/all_aligned.fasta;" 
        " [[ -f {input} ]] || cat IRMA/*/amended_consensus/*.pad.fa >> IRMA/all.fasta &&"
        " touch {output}"
