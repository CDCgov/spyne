import os
import sys

shell.executable("bash")

workdir: "."
configfile: "config.yaml"

config["barcodes"] = {str(k): v for k, v in config["barcodes"].items()}
config["barcodes"] = OrderedDict([(key, config["barcodes"][key]) for key in config["barcodes"] ])

def memory_for_bbduk():
    # Try to detect how much total memory is available on host (or what was 
    # alloted to Docker) and assign 50% of that to bbduk. Assure that number is
    # not negative and if all this fails, make it a tiny 30 megabytes.
    try:
        return abs(int(int(os.popen('free -t -m').readlines()[-1].split()[-1])*0.5))
    except:
        return 30

rule all:
    input:
        expand("IRMA/FLU_{barcode}.fin", barcode=config["barcodes"].keys())
    shell:
        "touch IRMA/spyne.fin"

rule gather_fastqs:
    input:
        "config.yaml"
    output:
        fq = "IRMA/cat_{barcode}.fastq.gz"
    message: "Step 1 - merging all read files into a single file"
    params:
        barcode_number = lambda wildcards: config["barcodes"][wildcards.barcode]["barcode_number"]
    shell:
        "cat fastq_pass/{params.barcode_number}/*fastq* > {output.fq} || touch IRMA/FLU_{wildcards.barcode}.fin"

rule subsample:
    input:
        rules.gather_fastqs.output
    output:
        "IRMA/{barcode}_subsampled.fastq"
    log:
        out = "logs/{barcode}.reformat.stdout.log",
        err = "logs/{barcode}.reformat.stderr.log"
    group:
        "trim-map"
    message: "Step 4b - subsampling cleaned up reads if excess > 50K exist"
    shell:
        "reformat.sh"
        " in={input}"
        " out={output}"
        " samplereadstarget=50000"
        " qin=33"
        " tossbrokenreads"
        " 1> {log.out}"
        " 2> {log.err}"
        " || touch {output}"

rule barcode_trim_left:
    input:
        rules.subsample.output
    output:
        "IRMA/{barcode}_bartrim_l.fastq"
    log:
        out = "logs/{barcode}.bbduk.trim_left.stdout.log",
        err = "logs/{barcode}.bbduk.trim_left.stderr.log"
    params:
        barcode_sequence = lambda wildcards: config["barcodes"][wildcards.barcode]["barcode_sequence"],
        mem = memory_for_bbduk()
    group:
        "trim-map"
    threads: 16
    message: "Step 2 - trimming left barcode"
    shell:
        "bbduk.sh" 
        " -Xmx{params.mem}m"
        " -Xms{params.mem}m"
        " in={input}"
        " out={output}"
        " hdist=3"
        " literal={params.barcode_sequence}"
        " ktrim=l"
        " k=17"
        " qin=33"
        " rcomp=f"
        " threads={threads}"
        " 1> {log.out}"
        " 2> {log.err}"

rule barcode_trim_right:
    input:
        rules.barcode_trim_left.output
    output:
        "IRMA/{barcode}_bartrim_lr.fastq"
    log:
        out = "logs/{barcode}.bbduk.trim_right.stdout.log",
        err = "logs/{barcode}.bbduk.trim_right.stderr.log"
    params:
        barcode_sequence = lambda wildcards: config["barcodes"][wildcards.barcode]["barcode_sequence_rc"],
        mem = memory_for_bbduk()
    group:
        "trim-map"
    threads: 16
    message: "Step 3 - trimming right barcode"
    shell:
        "bbduk.sh"
        " -Xmx{params.mem}m"
        " -Xms{params.mem}m"
        " in={input}"
        " out={output}"
        " hdist=3"
        " literal={params.barcode_sequence}"
        " ktrim=r"
        " k=17"
        " qin=33"
        " rcomp=f"
        " threads={threads}"
        " 1> {log.out}"
        " 2> {log.err}"

rule cutadapt:
    input:
        rules.barcode_trim_right.output
    output:
        "IRMA/{barcode}_bartrim_lr_cutadapt.fastq"
    log:
        out = "logs/{barcode}.cutadapt.stdout.log",
        err = "logs/{barcode}.cutadapt.stderr.log"
    group:
        "trim-map"
    message: "Step 4 - clipping reads on both sides"
    shell:
        "cutadapt -u 30 -u -30 --output {output} {input} 1> {log.out} 2> {log.err}"

rule irma:
    input:
        rules.cutadapt.output
    output:
        touch("IRMA/{barcode}.irma.fin")
    log:
        out = "logs/{barcode}.irma.stdout.log",
        err = "logs/{barcode}.irma.stderr.log"
    benchmark:
        "logs/benchmarks/irma_{barcode}.log"
    group:
        "trim-map"
    threads: 14
    message: "Step 5 - assembling genome with IRMA"
    shell:
        "IRMA FLU-minion /data/{config[runid]}/{input} /data/{config[runid]}/IRMA/{wildcards.barcode} 2> {log.err} |tee -a {log.out} || touch {output}"

# Pipeline waits here for all samples to produce the checkpoint input needed
#  here and then reevaluates the needed DAG for each sample.
checkpoint checkirma:
    input:
        ancient(rules.irma.output)
    output:
        'IRMA/{barcode}.irma.decision'
    log:
        "logs/irma/checkirma_{barcode}.log"
    shell:
        "[ -d IRMA/{wildcards.barcode}/amended_consensus ] &&"
        "[ \"$(ls -A IRMA/{wildcards.barcode}/amended_consensus)\" ] &&"
        " echo passed > {output} ||"
        " echo failed > {output}"

def passed_irma(wildcards):
    with checkpoints.checkirma.get(barcode=wildcards.barcode).\
    output[0].open() as f:
        if f.read().strip() == "passed":
            return rules.prepareIRMAjson.output
        else:
            return rules.pass_negatives.output

rule pass_negatives:
    input:
        ancient(rules.checkirma.output)
    output:
        "IRMA_negative/{barcode}"
    shell:
        "touch {output}"

rule catfiles:
    input:
        expand('IRMA/{barcode}.irma.decision', barcode=config["barcodes"].keys())
    output:
        "DAIS_ribosome_input.fasta"
    message: "Step 6 - Collecting consensus genomes"
    shell:
        "for file in $(ls IRMA/*/amended_consensus/*.fa | grep -v pad); do cat $file >> {output}; done" 

rule dais_ribosome:
    input: 
        rules.catfiles.output
    output:
        touch('IRMA/DAIS_ribosome_output.fin')
    message: "Step 7 - Translating sequences into open reading frames (ORFs) with DAIS-Ribosome"
    log:
        "logs/dais_ribosome/dais.ribosome.log"
    shell:
        "{workflow.basedir}/scripts/daiswrapper.sh -i {config[runid]}/{input} -m INFLUENZA"

rule prepareIRMAjson:
    input:
        rules.dais_ribosome.output
    output:
        touch('IRMA/prepareIRMAjson.fin')
    message: "Step 8 - Creating Plotly-Dash readable figures and tables for IRMA-SPY"
    log:
        "logs/prepareIRMAjson.log"
    shell:
        "python3 {workflow.basedir}/scripts/prepareIRMAjson.py IRMA samplesheet.csv ont flu"

rule finishup:
    input:
        passed_irma    
    output:
        touch("IRMA/FLU_{barcode}.fin")