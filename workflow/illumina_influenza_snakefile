#!/usr/bin/env snakemake

import os
import sys
import glob

shell.executable("bash")

workdir: "."
configfile: "config.yaml"

rule all:
    input:
        expand("FLU_{sample}.fin", sample=config["samples"].keys()), 'DAIS_ribosome_output.fin'
    shell:
        "echo DONEDONE"

rule irma:
    input:
        glob.iglob("fastqs/*/{sample}*R1*.fastq*")
    output:
        temp(touch("IRMA/{sample}.irma.fin"))
    log:
        out = "logs/{sample}.irma.stdout.log",
        err = "logs/{sample}.irma.stderr.log"
    benchmark:
        "logs/benchmarks/irma_{sample}.log"
    group:
        "trim-map"
    threads: 14
    message: "Step 5 - assembling genome with IRMA"
    shell:
        "docker run --rm -v $PWD:/data public.ecr.aws/n3z8t4o2/irma:1.0.2p3 IRMA FLU fastqs/*/{wildcards.sample}*R1*.fastq* fastqs/*/{wildcards.sample}*R2*.fastq*  IRMA/{wildcards.sample} 2> {log.err} |tee -a {log.out}"

# Pipeline waits here for all samples to produce the checkpoint input needed
#  here and then reevaluates the needed DAG for each sample.
checkpoint checkirma:
    input:
        ancient('IRMA/{sample}.irma.fin')
    output:
        temp('IRMA/{sample}.irma.decision')
    log:
        "logs/irma/checkirma_{sample}.log"
    shell:
        "[[ -d IRMA/{wildcards.sample}/figures ]] &&"
        " echo passed > {output} ||"
        " echo failed > {output}"



def passed_irma(wildcards):
    with checkpoints.checkirma.get(sample=wildcards.sample).\
    output[0].open() as f:
        if f.read().strip() == "passed":
            return 'IRMA/{sample}'
        else:
            return "IRMA_negative/{sample}"


rule pass_negatives:
    input:
        "IRMA/{sample}.irma.decision"
    output:
        "IRMA_negative/{sample}"
    shell:
        "touch {output}"

rule catfiles:
    input:
        expand('IRMA/{sample}.irma.decision', sample=config["samples"].keys())
    output:
        temp("DAIS_ribosome_input.fasta")
    message: "Step 6 - Collecting consensus genomes"
    shell:
        "cat IRMA/*/amended_consensus/*.fa > {output} || touch {output}"

rule dais_ribosome:
    input: 
        "DAIS_ribosome_input.fasta"
    output:
        temp('DAIS_ribosome_output.fin')
    message: "Step 7 - Translating sequences into open reading frames (ORFs) with DAIS-Ribosome"
    log:
        "logs/dais_ribosome/dais.ribosome.log"
    shell:
        "{workflow.basedir}/scripts/daiswrapper.sh -i {input} -m INFLUENZA && touch {output} || touch {output}"



rule finishup:
    input:
        passed_irma
    output:
        temp("FLU_{sample}.fin")
    shell:
        "touch {output}"