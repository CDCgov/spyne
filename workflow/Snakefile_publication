#!/usr/bin/env snakemake


import os
import sys


shell.executable("bash")


workdir: "."
configfile: "config.yaml"


rule all:
    input:
        expand("SC2.{barcode}.fin", barcode=config["barcodes"].keys())
    shell:
        'bash {workflow.basedir}/scripts/sc2_irma_qc.sh IRMA/ irma_qc_summary.csv ONT spike'

rule gather_fastqs:
    input:
        "config.yaml"
    output:
        "IRMA/cat_{barcode}.fastq.gz"
    params:
        experiment_id = lambda wildcards: config["barcodes"][wildcards.barcode]["experiment_id"],
        sample_id = lambda wildcards: config["barcodes"][wildcards.barcode]["sample_id"],
        flow_cell_id = lambda wildcards: config["barcodes"][wildcards.barcode]["flow_cell_id"],
        barcode_number = lambda wildcards: config["barcodes"][wildcards.barcode]["barcode_number"],
        instrument_path = config["machine"]
    message: "Step 1 - merging all read files into a single file"
    shell:
        "cat {params.instrument_path}/{params.experiment_id}/{params.sample_id}/*{params.flow_cell_id}*/fastq_pass/{params.barcode_number}/*fastq* > {output}"


rule barcode_trim_left:
    input:
        ancient("IRMA/cat_{barcode}.fastq.gz")
    output:
        "IRMA/{barcode}_bartrim_l.fastq"
    log:
        out = "logs/{barcode}.bbduk.trim_left.stdout.log",
        err = "logs/{barcode}.bbduk.trim_left.stderr.log"
    params:
        barcode_sequence = lambda wildcards: config["barcodes"][wildcards.barcode]["barcode_sequence"]
    group:
        "trim-map"
    
    threads: 16
    message: "Step 2 - trimming left barcode"
    shell:
        "/apps/x86_64/bbmap/38.84/bbduk.sh"
        " in={input}"
        " out={output}"
        " hdist=3"
        " literal={params.barcode_sequence}"
        " ktrim=l"
        " k=17"
        " qin=33"
        " rcomp=f"
        " threads={threads}"
        " 1> {log.out}"
        " 2> {log.err}"



rule barcode_trim_right:
    input:
        ancient("IRMA/{barcode}_bartrim_l.fastq")
    output:
        "IRMA/{barcode}_bartrim_lr.fastq"
    log:
        out = "logs/{barcode}.bbduk.trim_right.stdout.log",
        err = "logs/{barcode}.bbduk.trim_right.stderr.log"
    params:
        barcode_sequence = lambda wildcards: config["barcodes"][wildcards.barcode]["barcode_sequence_rc"]
    group:
        "trim-map"
    # conda:
    #     "envs/bbtools.yaml"
    threads: 16
    message: "Step 3 - trimming right barcode"
    shell:
        "/apps/x86_64/bbmap/38.84/bbduk.sh"
        " in={input}"
        " out={output}"
        " hdist=3"
        " literal={params.barcode_sequence}"
        " ktrim=r"
        " k=17"
        " qin=33"
        " rcomp=f"
        " threads={threads}"
        " 1> {log.out}"
        " 2> {log.err}"


rule cutadapt:
    input:
        ancient("IRMA/{barcode}_bartrim_lr.fastq")
    output:
        "IRMA/{barcode}_bartrim_lr_cutadapt.fastq"
    log:
        out = "logs/{barcode}.cutadapt.stdout.log",
        err = "logs/{barcode}.cutadapt.stderr.log"
    group:
        "trim-map"
    conda:
        "envs/cutadapt.yaml"
    message: "Step 4 - clipping reads on both sides"
    shell:
        "cutadapt -u 30 -u -30 -o {output} {input} 1> {log.out} 2> {log.err}"



rule subsample:
    input:
        ancient("IRMA/{barcode}_bartrim_lr_cutadapt.fastq")
    output:
        "IRMA/{barcode}_bartrim_lr_cutadapt_subsampled.fastq"
    log:
        out = "logs/{barcode}.reformat.stdout.log",
        err = "logs/{barcode}.reformat.stderr.log"
    group:
        "trim-map"
    # conda:
    #     "envs/bbtools.yaml"
    message: "Step 4b - subsampling cleaned up read if excess > 1M exist"
    shell:
        "/apps/x86_64/bbmap/38.84/reformat.sh"
        " in={input}"
        " out={output}"
        " samplereadstarget=1000000"
        " qin=33"
        " 1> {log.out}"
        " 2> {log.err}"



rule irma:
    input:
        ancient("IRMA/{barcode}_bartrim_lr_cutadapt_subsampled.fastq")
    output:
        touch("IRMA/{barcode}.irma.fin")
    log:
        out = "logs/{barcode}.irma.stdout.log",
        err = "logs/{barcode}.irma.stderr.log"
    benchmark:
        "logs/benchmarks/irma_{barcode}.log"
    group:
        "trim-map"
    threads: 14
    message: "Step 5 - assembling genome"
    shell:
        '{workflow.basedir}/scripts/irmawrapper.sh CoV-s-gene {input} {wildcards.barcode} 1> {log.out} 2> {log.err}'


# Pipeline waits here for all samples to produce the checkpoint input needed
#  here and then reevaluates the needed DAG for each sample.
checkpoint checkirma:
    input:
        ancient('IRMA/{barcode}.irma.fin')
    output:
        'IRMA/{barcode}.irma.decision'
    log:
        "logs/irma/checkirma_{barcode}.log"
    shell:
        "[[ -s IRMA/{wildcards.barcode}/SARS-CoV-2.bam ]] &&"
        " echo passed > {output} ||"
        " echo failed > {output}"



def passed_irma(wildcards):
    with checkpoints.checkirma.get(barcode=wildcards.barcode).\
    output[0].open() as f:
        if f.read().strip() == "passed":
            return 'hadoop/dais.fin'
        else:
            return "IRMA_negative/{barcode}"


rule pass_negatives:
    input:
        "IRMA/{barcode}.irma.decision"
    output:
        "IRMA_negative/{barcode}"
    shell:
        "touch {output}"



rule finishup:
    input:
        passed_irma
    output:
        temp("SC2.{barcode}.fin")
    shell:
        "touch {output}"
